apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: mutate-public-registry-images
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: cluster-base
    policies.kyverno.io/description: 
      This policy provides automation around image registers. It replaces the image registry with a private registry for public images. It also adds an imagePullSecret to the pod spec for private images.
      The usage of the public-registry-mapping configmap allow a customizable mapping between the public registry and the private one, mostly related to the usage of ECR pull through cache feature.
    policies.kyverno.io/subject: Public Images
    policies.kyverno.io/title: Use Artifactory or ECR for public registry images
spec:
  admission: true
  background: false
  rules:
    - name: replace-image-registry-pod-containers
      match:
        resources:
          kinds:
            - Pod
          operations:
            - CREATE
      context:
        - name: mappings
          configMap:
            name: public-registry-mapping
            namespace: kube-system
      preconditions:
        all:
          - key: "{{ request.object.spec.imagePullSecrets[0].name || '' | length(@) }}"
            operator: Equals
            value: 0
      mutate:
        foreach:
          - list: request.object.spec.containers
            patchesJson6902: |-
              - path: /spec/containers/{{elementIndex}}/image
                op: replace
                value: '{{mappings.data."{{images.containers."{{element.name}}".registry}}"}}/{{ ( images.containers."{{element.name}}".registry == 'docker.io' && regex_match('^[a-z0-9-]+(:.*)?$','{{images.containers."{{element.name}}".path}}') && 'library/') || '' }}{{ images.containers."{{element.name}}".path}}:{{images.containers."{{element.name}}".tag}}'
            preconditions:
              all:
                - key: '{{mappings.data."{{images.containers."{{element.name}}".registry}}" || ''''}}'
                  operator: NotEquals
                  value: ""
                - key: '{{ images.containers."{{element.name}}".digest || ''''}}'
                  operator: Equals
                  value: ""
          - list: request.object.spec.containers
            patchesJson6902: |-
              - path: /spec/containers/{{elementIndex}}/image
                op: replace
                value: '{{mappings.data."{{images.containers."{{element.name}}".registry}}"}}/{{ ( images.containers."{{element.name}}".registry == 'docker.io' && regex_match('^[a-z0-9-]+(:.*)?$','{{images.containers."{{element.name}}".path}}') && 'library/') || '' }}{{ images.containers."{{element.name}}".path}}@{{ images.containers."{{element.name}}".digest}}'
            preconditions:
              all:
                - key: '{{mappings.data."{{images.containers."{{element.name}}".registry}}" || ''''}}'
                  operator: NotEquals
                  value: ""
                - key: '{{ images.containers."{{element.name}}".digest || ''''}}'
                  operator: NotEquals
                  value: ""

    - name: replace-image-registry-pod-init-containers
      match:
        resources:
          kinds:
            - Pod
          operations:
            - CREATE
      context:
        - name: mappings
          configMap:
            name: public-registry-mapping
            namespace: kube-system
      preconditions:
        all:
          - key: "{{ request.object.spec.initContainers[] || '' | length(@) }}"
            operator: GreaterThanOrEquals
            value: 1
          - key: "{{ request.object.spec.imagePullSecrets[0].name || '' | length(@) }}"
            operator: Equals
            value: 0
      mutate:
        foreach:
          - list: request.object.spec.initContainers
            preconditions:
              all:
                - key: '{{mappings.data."{{images.initContainers."{{element.name}}".registry}}" || ''''}}'
                  operator: NotEquals
                  value: ""
                - key: '{{ images.initContainers."{{element.name}}".digest || ''''}}'
                  operator: Equals
                  value: ""
            patchesJson6902: |-
              - path: /spec/initContainers/{{elementIndex}}/image
                op: replace
                value: '{{mappings.data."{{images.initContainers."{{element.name}}".registry}}"}}/{{ ( images.initContainers."{{element.name}}".registry == 'docker.io' && regex_match('^[a-z0-9-]+(:.*)?$','{{images.initContainers."{{element.name}}".path}}') && 'library/') || '' }}{{ images.initContainers."{{element.name}}".path}}:{{images.initContainers."{{element.name}}".tag}}'
          - list: request.object.spec.initContainers
            preconditions:
              all:
                - key: '{{mappings.data."{{images.initContainers."{{element.name}}".registry}}" || ''''}}'
                  operator: NotEquals
                  value: ""
                - key: '{{ images.initContainers."{{element.name}}".digest || ''''}}'
                  operator: NotEquals
                  value: ""
            patchesJson6902: |-
              - path: /spec/initContainers/{{elementIndex}}/image
                op: replace
                value: '{{mappings.data."{{images.initContainers."{{element.name}}".registry}}"}}/{{ ( images.initContainers."{{element.name}}".registry == 'docker.io' && regex_match('^[a-z0-9-]+(:.*)?$','{{images.initContainers."{{element.name}}".path}}') && 'library/') || '' }}{{ images.initContainers."{{element.name}}".path}}@{{ images.initContainers."{{element.name}}".digest}}'

    - name: replace-image-registry-pod-containers-ecr
      match:
        resources:
          kinds:
            - Pod
          operations:
            - CREATE
      context:
        - name: clusterConfig
          configMap:
            name: cluster-config
            namespace: kube-system
      mutate:
        foreach:
          - list: request.object.spec.containers
            context:
              - name: registryId
                variable:
                  value: '{{ regex_replace_all(''^([0-9]+).dkr.ecr.*'', images.containers."{{element.name}}".registry, ''$1'') }}'
              - name: imageExists
                apiCall:
                  method: POST
                  data:
                    - key: repositoryName
                      value: '{{images.containers."{{element.name}}".path}}'
                    - key: imageTag
                      value: '{{images.containers."{{element.name}}".tag || ''invalid''}}'
                    - key: registryId
                      value: '{{ registryId }}'
                    - key: region
                      value: "{{ clusterConfig.data.region }}"
                  service:
                    url: http://ecr-image-checker.kube-system:9898/api/v1/image-exists
            preconditions:
              all:
                - key: '{{images.containers."{{element.name}}".registry || ''''}}'
                  operator: Equals
                  value: "*.dkr.ecr.*.amazonaws.com"
                - key: '{{images.containers."{{element.name}}".registry || ''''}}'
                  operator: NotEquals
                  value: "*.dkr.ecr.{{ clusterConfig.data.region }}.amazonaws.com"
                - key: "{{imageExists.exists}}"
                  operator: Equals
                  value: true
            patchesJson6902: |-
              - path: /spec/containers/{{elementIndex}}/image
                op: replace
                value: '{{ registryId }}.dkr.ecr.{{ clusterConfig.data.region }}.amazonaws.com/{{ images.containers."{{element.name}}".path}}:{{images.containers."{{element.name}}".tag}}'
                
    - name: replace-image-registry-pod-init-containers-ecr
      match:
        resources:
          kinds:
            - Pod
          operations:
            - CREATE
      context:
        - name: clusterConfig
          configMap:
            name: cluster-config
            namespace: kube-system
      preconditions:
        all:
          - key: "{{ request.object.spec.initContainers[] || '' | length(@) }}"
            operator: GreaterThanOrEquals
            value: 1
      mutate:
        foreach:
          - list: request.object.spec.initContainers
            context:
              - name: registryId
                variable:
                  value: '{{ regex_replace_all(''^([0-9]+).dkr.ecr.*'', images.initContainers."{{element.name}}".registry, ''$1'') }}'
              - name: imageExists
                apiCall:
                  method: POST
                  data:
                    - key: repositoryName
                      value: '{{images.initContainers."{{element.name}}".path}}'
                    - key: imageTag
                      value: '{{images.initContainers."{{element.name}}".tag || ''invalid''}}'
                    - key: registryId
                      value: '{{ registryId }}'
                    - key: region
                      value: "{{ clusterConfig.data.region }}"
                  service:
                    url: http://ecr-image-checker.kube-system:9898/api/v1/image-exists
            preconditions:
              all:
                - key: '{{images.initContainers."{{element.name}}".registry || ''''}}'
                  operator: Equals
                  value: "*.dkr.ecr.*.amazonaws.com"
                - key: '{{images.initContainers."{{element.name}}".registry || ''''}}'
                  operator: NotEquals
                  value: "*.dkr.ecr.{{ clusterConfig.data.region }}.amazonaws.com"
                - key: "{{imageExists.exists}}"
                  operator: Equals
                  value: true
            patchesJson6902: |-
              - path: /spec/initContainers/{{elementIndex}}/image
                op: replace
                value: '{{ registryId }}.dkr.ecr.{{ clusterConfig.data.region }}.amazonaws.com/{{ images.initContainers."{{element.name}}".path}}:{{images.initContainers."{{element.name}}".tag}}'

    - name: add-imagepullsecret-containers
      match:
        resources:
          kinds:
            - Pod
      mutate:
        patchStrategicMerge:
          spec:
            containers:
              - <(image): my-registry-proxy.example.com/*
            imagePullSecrets:
              - name: registry-proxy-private-key
    - name: add-imagepullsecret-init-containers
      match:
        resources:
          kinds:
            - Pod
      mutate:
        patchStrategicMerge:
          spec:
            (initContainers):
              - <(image): my-registry-proxy.example.com/*
            imagePullSecrets:
              - name: registry-proxy-private-key
